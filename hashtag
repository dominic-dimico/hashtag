#!/usr/bin/python

import argparse
import hashtag;

from pprint import pprint as pp



################################################################################
# Main method
################################################################################
if __name__ == '__main__':

  parser = argparse.ArgumentParser()
  parser.add_argument('-q', '--query',   help='Database query',   default=None)
  parser.add_argument('-i', '--input',   help='File query input', default=None)
  parser.add_argument('-f', '--file',    help='Database file',    default=None)
  parser.add_argument('-x', '--delete',  help='Paths to delete',  default=None)
  parser.add_argument('-t', '--tags',    help='List tags',        default=False, action="store_true")
  parser.add_argument('search', metavar='query', type=str, nargs='*', help='Search term')
  args = parser.parse_args()

  if not args.file:
     args.file = "database.tag"

  ht  = hashtag.HashTagger(args.file);
  res = None;

  if args.input: 
       queries = ht.parsedb(args.input);

  elif args.delete:
       paths = ht.file2rows(args.delete);
       paths = [p[0] for p in paths];
       ht.delete_entries(paths);

  elif args.tags:
       ts = ht.tagscount();
       mx = max([len(t) for [t, c] in ts]);
       for t in ts:
           sp = ' ' * (mx-len(t[0]));
           print("%s%s %4d" % (t[0], sp, t[1]));

  else:
    if   args.query:    query = args.query;
    elif args.search:   query = " ".join(args.search);

    res = ht.search(query);

  if res:
     for r in res:
         print(r)
         pass
